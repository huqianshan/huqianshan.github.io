 @article{Liu_2025,
  abbr={TACO},
  bibtex_show={true},
  title     = {ZNSFQ: An Efficient and High-Performance Fair Queue Scheduling Scheme for ZNS SSDs},
  volume    = {22},
  issn      = {1544-3973},
  url       = {http://dx.doi.org/10.1145/3746230},
  doi       = {10.1145/3746230},
  number    = {3},
  journal   = {ACM Transactions on Architecture and Code Optimization},
  publisher = {Association for Computing Machinery (ACM)},
  author    = {Liu, Yachun and Feng, Dan and Chen, Jianxi and Hu, Jing and Peng, Zhouxuan and Hu, Jinlei},
  year      = {2025},
  month     = {sep},
  pages     = {1--27},
  google_scholar_id={qjMakFHDy7sC},
  selected={false},

}

@article{Peng_2025,
  abbr={TACD},
  bibtex_show={true},
  title     = {AdaptHM: A Fully Adaptive Data Migration Strategy for Hybrid Memory Systems},
  volume    = {44},
  issn      = {1937-4151},
  url       = {http://dx.doi.org/10.1109/TCAD.2023.3333284},
  doi       = {10.1109/tcad.2023.3333284},
  number    = {3},
  journal   = {IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems},
  publisher = {Institute of Electrical and Electronics Engineers (IEEE)},
  author    = {Peng, Zhouxuan and Feng, Dan and Chen, Jianxi and Hu, Jing and Liu, Yachun and Hu, Jinlei and Zhang, Jintong and Wan, Tianyu and Chen, Zuoning},
  year      = {2025},
  month     = {mar},
  pages     = {923--936},
  google_scholar_id={d1gkVwhDpl0C},
  selected={false}
}

@inproceedings{Hong_2024,
  abbr={ICCD},
  bibtex_show={true},
  title     = {Optimizing Structural Modification Operation for B+-Tree on Byte-Addressable Devices},
  abstract ={Persistent Memory (PM) offers both byte-address ability and non-volatility, making it well-suited for accelerating B+-Tree indexes. However, existing persistent B+-Tree indexes face significant performance challenges due to high structural modification operation (SMO) overhead. SMOs often result in costly item migrations and increased tail latency, which severely degrade the overall performance. In this paper, we present SSTree, a high-performance B+– Tree index specifically optimized to address SMO overhead. SSTree introduces three key innovations: (i) efficient leaf node expansion using a list of subnodes to postpone expensive node splits, (ii) delegated fingerprints to speed up search operations across subnodes, and (iii) proactive subnode compaction that employs out-of-place updates to optimize item organization. Our evaluation demonstrates that SSTree delivers up to 4.38× higher write throughput and up to 62× lower tail latency compared to state-of-the-art persistent B+-Tree indexes.},
  url       = {http://dx.doi.org/10.1109/iccd63220.2024.00043},
  doi       = {10.1109/iccd63220.2024.00043},
  booktitle = {2024 IEEE 42nd International Conference on Computer Design (ICCD)},
  publisher = {IEEE Computer Society},
  author    = {Hong, Dingze† and Hu, Jinlei† and Chen, Jianxi and Feng, Dan and Liu, Jian},
  year      = {2024},
  month     = {nov},
  pages     = {231--238},
  pdf = {ICCD24_SSTree_Online.pdf},
  google_scholar_id={2osOgNQ5qMEC},
  preview={sstree.png},
  annotation={† Equal contribution.},
  selected={true}
}

@inproceedings{Hu_2023_RWORT,
  abbr={ICCD},
  bibtex_show={true},
  title     = {RWORT: A Read and Write Optimized Radix Tree for Persistent Memory},
  abstract  = {Tree index structures are widely employed in modern storage systems to support high-performance queries. Persistent memory (PM) brings a new opportunity and challenge for tree indexes. Among persistent tree indexes, we find the radix tree is more suitable than B-Tree for the byte-ability of PM. However, the hierarchy of radix remains excessively high, resulting in high read latency. Node splitting imposes a significant overhead on PM. To address these challenges, we propose RWORT, a read and write optimized radix tree for PM. The key focus of RWORT is to minimize random access in PM and provide efficient write operations. RWORT proposed a hierarchical compression mechanism to significantly reduce the tree height. Additionally, RWORT incorporates mini bloom filters to reduce unnecessary access on PM. For efficient write operations, RWORT uses the lazy split flag and the double-linked pointers to reduce the critical path delay. Furthermore, RWORT introduces a low-overhead ring-based bit tree allocator that improves allocation efficiency on PM. Our experiments show that RWORT improves up to 1.62x/4.91x respectively compared to the state-of-the-art radix tree/B-Tree. RWORT also exhibits higher performance in real-world storage systems such as Memcached.},
  url       = {https://doi.ieeecomputersociety.org/10.1109/ICCD58817.2023.00038},
  doi       = {10.1109/ICCD58817.2023.00038},
  booktitle = {2023 IEEE 41st International Conference on Computer Design (ICCD)},
  author    = {Hu, Jinlei and Wei Zijie and Chen Jianxi and Feng, Dan},
  year      = {2023},
  keywords  = {memory management;vegetation;delays;indexes;resource management;optimization},
  pages     = {194--197},
  publisher = {IEEE Computer Society},
  address   = {Los Alamitos, CA, USA},
  month     = {nov},
  preview={rwort.png},
  pdf = {ICCD23_RWORT_Online.pdf},
  google_scholar_id={9yKSN-GCB0IC},
  selected={true}
}
